#基础方法求100以内质数
import math
n = 100
for x in range(2,n):
	for i in range(2,math.ceil(math.sqrt(x))):
		if x%i==0:
			break
	else:
		print(x)
		
#普通方法求杨辉三角
triangle = [[1],[1,1]]
n = 6
for i in range(2,n):
	pre = triangle[i-1]
	cur = [1]
	for j in range(0,i-1):
		cur.append(pre[j]+pre[j+1])
	cur.append(1)
	triangle.append(cur)
print(triangle)
#进阶方法杨辉三角
n = 6
oldline = []
newline = [1]
length = 0
print(newline)
for i in range(1,n):
	oldline = newline.copy()
	oldline.append(0) #尾部加0
	newline.clear()
	for j in range(i+1):
		newline.append(oldline[j-1]+oldline[j])
	print(newline)
#计算优化 杨辉三角 创建一次空间 奇数个数中点跳过
triangle = []
n =6
for i in range(n):
	row = [1]#第0位的1
	for k in range(i):#中间填0，尾部填1
		row.append(1) if k == i-1 else row.append(0)
	triangle.append(row)
	if i == 0:
		continue
	for j in range(1,i//2+1): #n=3之后进入
		val = triangle[i-1][j-1]+triangle[i-1][j]
		row[j] = val
		if j!=i-j:#跳过奇数个数的中点
			row[-j-1] = val
print(triangle)
#接上 一次开辟空间
row = [1]*(i+1)
	triangle.append(row)
	if i == 0:

冒泡法实现
num_list = [1,9,8,7,6,5,4,3,2]
length = len (num_list)
count_swap = 0
flag = False
count = 0
#bubble sort
for i in range(length):
	for j in range(length-i-1):
		if num_list[j]>num_list[j+1]:
			a = num_list[j]
			num_list[j]=num_list[j+1]
			num_list[j+1]=a
			flag = True #swapped
			count_swap += 1
			count += 1
	if not flag:
		break
print(num_list,count_swap,count)

#高阶函数实现sorted排序
lst = [2,4,6,8,5,4,3,1]
#sorted newlist

def sort(lst , fn=lambda a,b:a>b):
    newlist = []
    for x in lst:
        for i,y in enumerate(newlist):
            if fn(x,y):
                newlist.insert(i , x)
                break
        else:
                newlist.append(x)
    return (newlist)

print(sort(lst))

#类 的 实例化简单代码
class MyClass:
	"""a sb """
	x = 'abc' #类属性
	
	def foo(self): #类属性foo,也是方法
		print(id(self))
		return self
		

print(MyClass.x)
a = MyClass() #实例化 初始化
print(a.x)
print(a.foo())

print(id(a))



	
#装饰一个类 装饰器
def setnameproperty(name):
	def wrapper(cls):
		cls.NAME = name
		return cls
	return wrapper
	
@setnameproperty('MY CLASS')
class MyClass:
	pass
	
print(MyClass.__dict__)


#装饰器 及 调用
import datetime
import time

def logger(fn):
	def wrap(*args, **kwargs):
		#before 功能增强
		print("args={},kwargs={}".format(args,kwargs))
		start=datetime.datetime.now()
		ret = fn(*args,**kwargs)
		#after 功能增强
		delta = datetime.datetime.now()-start
		print("function {} took {}s".format(fn.__name__,delta.total_seconds()))
		return ret
	return wrap
	
	
@logger  #相当于add = logger(add)
def add(x,y):
	print('=====call add=====')
	time.sleep(2)
	return x + y 
	
print(add(4,y=7))
